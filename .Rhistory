suppressMessages(library(biomaRt))
suppressMessages(library(BSgenome))
suppressMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressMessages(library(dplyr))
suppressMessages(library(Biostrings))
# 设置Ensembl数据集
if (species == "human") {
dataset <- "hsapiens_gene_ensembl"
genome <- BSgenome.Hsapiens.UCSC.hg38
} else if (species == "mouse") {
dataset <- "mmusculus_gene_ensembl"
genome <- BSgenome.Mmusculus.UCSC.mm39
} else {
stop("Unsupported species. Please use 'human' or 'mouse'.")
}
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = dataset)
# 获取转录本外显子信息
exons <- NULL
for (i in seq_len(max_retries)) {
exons <- tryCatch({
getBM(attributes = c("chromosome_name", "exon_chrom_start", "exon_chrom_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for exons (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(exons) && nrow(exons) > 0) break
}
if (is.null(exons) || nrow(exons) == 0) {
stop("Transcript not found or error in retrieving exon data.")
}
# 获取转录本信息
transcript_info <- NULL
for (i in seq_len(max_retries)) {
transcript_info <- tryCatch({
getBM(attributes = c("chromosome_name", "transcript_start", "transcript_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for transcript_info (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(transcript_info) && nrow(transcript_info) > 0) break
}
if (is.null(transcript_info) || nrow(transcript_info) == 0) {
stop("Transcript information not found or error in retrieving transcript data.")
}
# 计算外显子和内含子位置
if (transcript_info$strand == 1) {  # 正链
exons <- exons %>%
arrange(exon_chrom_start)  # 按起始位置升序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_end[-nrow(exons)] + 1,
end = exons$exon_chrom_start[-1] - 1
)
} else {  # 负链
exons <- exons %>%
arrange(desc(exon_chrom_start))  # 按起始位置降序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_start[-1] + 1,
end = exons$exon_chrom_end[-nrow(exons)] - 1
) %>%
arrange(desc(start))  # 按内含子起始位置降序排列
}
# 移除无效的内含子区域
introns <- introns %>%
filter(start <= end)
# 提取外显子序列
exon_sequences <- mapply(function(start, end) {
seq <- getSeq(genome, names = paste0("chr", exons$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, exons$exon_chrom_start, exons$exon_chrom_end, SIMPLIFY = FALSE)
# 提取内含子序列
intron_sequences <- mapply(function(start, end) {
if (start > end) return(NULL)
seq <- getSeq(genome, names = paste0("chr", introns$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, introns$start, introns$end, SIMPLIFY = FALSE)
# 给外显子和内含子添加序号
exons_with_id <- paste0("Exon_", seq_along(exon_sequences))
introns_with_id <- paste0("Intron_", seq_along(intron_sequences))
# 将外显子和内含子合并在一起
sequences <- c(
setNames(exon_sequences, exons_with_id),
setNames(intron_sequences, introns_with_id)
)
# 根据序列位置进行排序（将外显子按位置排序，将内含子按位置排序）
sorted_sequences <- sequences[order(as.integer(gsub("Exon_|Intron_", "", names(sequences))))]
# 将序列转换为数据框
sequences_df <- data.frame(
ID = names(sorted_sequences),
Sequence = unlist(sorted_sequences),
stringsAsFactors = FALSE
)
# 返回数据框
return(sequences_df)
}
# 示例使用
result <- qqseq("ENSMUST00000127786", "mouse")
View(result)
#自定义函数#
qqseq <- function(transcript_id, species, max_retries = 20) {
# 加载包
suppressMessages(library(biomaRt))
suppressMessages(library(BSgenome))
suppressMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressMessages(library(Biostrings))
# 设置Ensembl数据集
if (species == "human") {
dataset <- "hsapiens_gene_ensembl"
genome <- BSgenome.Hsapiens.UCSC.hg38
} else if (species == "mouse") {
dataset <- "mmusculus_gene_ensembl"
genome <- BSgenome.Mmusculus.UCSC.mm39
} else {
stop("Unsupported species. Please use 'human' or 'mouse'.")
}
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = dataset)
# 获取转录本外显子信息
exons <- NULL
for (i in seq_len(max_retries)) {
exons <- tryCatch({
getBM(attributes = c("chromosome_name", "exon_chrom_start", "exon_chrom_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for exons (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(exons) && nrow(exons) > 0) break
}
if (is.null(exons) || nrow(exons) == 0) {
stop("Transcript not found or error in retrieving exon data.")
}
# 获取转录本信息
transcript_info <- NULL
for (i in seq_len(max_retries)) {
transcript_info <- tryCatch({
getBM(attributes = c("chromosome_name", "transcript_start", "transcript_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for transcript_info (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(transcript_info) && nrow(transcript_info) > 0) break
}
if (is.null(transcript_info) || nrow(transcript_info) == 0) {
stop("Transcript information not found or error in retrieving transcript data.")
}
# 计算外显子和内含子位置
if (transcript_info$strand == 1) {  # 正链
exons <- exons %>%
arrange(exon_chrom_start)  # 按起始位置升序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_end[-nrow(exons)] + 1,
end = exons$exon_chrom_start[-1] - 1
)
} else {  # 负链
exons <- exons %>%
arrange(desc(exon_chrom_start))  # 按起始位置降序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_start[-1] + 1,
end = exons$exon_chrom_end[-nrow(exons)] - 1
) %>%
arrange(desc(start))  # 按内含子起始位置降序排列
}
# 移除无效的内含子区域
introns <- introns %>%
filter(start <= end)
# 提取外显子序列
exon_sequences <- mapply(function(start, end) {
seq <- getSeq(genome, names = paste0("chr", exons$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, exons$exon_chrom_start, exons$exon_chrom_end, SIMPLIFY = FALSE)
# 提取内含子序列
intron_sequences <- mapply(function(start, end) {
if (start > end) return(NULL)
seq <- getSeq(genome, names = paste0("chr", introns$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, introns$start, introns$end, SIMPLIFY = FALSE)
# 给外显子和内含子添加序号
exons_with_id <- paste0("Exon_", seq_along(exon_sequences))
introns_with_id <- paste0("Intron_", seq_along(intron_sequences))
# 将外显子和内含子合并在一起
sequences <- c(
setNames(exon_sequences, exons_with_id),
setNames(intron_sequences, introns_with_id)
)
# 根据序列位置进行排序（将外显子按位置排序，将内含子按位置排序）
sorted_sequences <- sequences[order(as.integer(gsub("Exon_|Intron_", "", names(sequences))))]
# 将序列转换为数据框
sequences_df <- data.frame(
ID = names(sorted_sequences),
Sequence = unlist(sorted_sequences),
stringsAsFactors = FALSE
)
# 返回数据框
return(sequences_df)
}
# 示例使用
result <- qqseq("ENSMUST00000127786", "mouse")
View(result)
library(qqseq)
# 如果包为使用时必须的，则需要设置 type = "Imports"
usethis::use_package(package = "biomaRt", type = "Imports")
usethis::use_package(package = "BSgenome", type = "Imports")
usethis::use_package(package = "BSgenome.Hsapiens.UCSC.hg38", type = "Imports")
usethis::use_package(package = "BSgenome.Mmusculus.UCSC.mm39", type = "Imports")
usethis::use_package(package = "dplyr", type = "Imports")
usethis::use_package(package = "Biostrings", type = "Imports")
usethis::use_package(package = "dbplyr", type = "Imports")
usethis::use_package(package = "dbplyr", type = "Imports")
# 保存当前所用的包环境
renv::snapshot()
####qqseq
#自定义函数#
qqseq <- function(transcript_id, species, max_retries = 20) {
# 加载包
suppressMessages(library(biomaRt))
suppressMessages(library(BSgenome))
suppressMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressMessages(library(dplyr))
suppressMessages(library(Biostrings))
suppressMessages(library(dbplyr))
# 设置Ensembl数据集
if (species == "human") {
dataset <- "hsapiens_gene_ensembl"
genome <- BSgenome.Hsapiens.UCSC.hg38
} else if (species == "mouse") {
dataset <- "mmusculus_gene_ensembl"
genome <- BSgenome.Mmusculus.UCSC.mm39
} else {
stop("Unsupported species. Please use 'human' or 'mouse'.")
}
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = dataset)
# 获取转录本外显子信息
exons <- NULL
for (i in seq_len(max_retries)) {
exons <- tryCatch({
getBM(attributes = c("chromosome_name", "exon_chrom_start", "exon_chrom_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for exons (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(exons) && nrow(exons) > 0) break
}
if (is.null(exons) || nrow(exons) == 0) {
stop("Transcript not found or error in retrieving exon data.")
}
# 获取转录本信息
transcript_info <- NULL
for (i in seq_len(max_retries)) {
transcript_info <- tryCatch({
getBM(attributes = c("chromosome_name", "transcript_start", "transcript_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for transcript_info (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(transcript_info) && nrow(transcript_info) > 0) break
}
if (is.null(transcript_info) || nrow(transcript_info) == 0) {
stop("Transcript information not found or error in retrieving transcript data.")
}
# 计算外显子和内含子位置
if (transcript_info$strand == 1) {  # 正链
exons <- exons %>%
arrange(exon_chrom_start)  # 按起始位置升序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_end[-nrow(exons)] + 1,
end = exons$exon_chrom_start[-1] - 1
)
} else {  # 负链
exons <- exons %>%
arrange(desc(exon_chrom_start))  # 按起始位置降序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_start[-1] + 1,
end = exons$exon_chrom_end[-nrow(exons)] - 1
) %>%
arrange(desc(start))  # 按内含子起始位置降序排列
}
# 移除无效的内含子区域
introns <- introns %>%
filter(start <= end)
# 提取外显子序列
exon_sequences <- mapply(function(start, end) {
seq <- getSeq(genome, names = paste0("chr", exons$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, exons$exon_chrom_start, exons$exon_chrom_end, SIMPLIFY = FALSE)
# 提取内含子序列
intron_sequences <- mapply(function(start, end) {
if (start > end) return(NULL)
seq <- getSeq(genome, names = paste0("chr", introns$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, introns$start, introns$end, SIMPLIFY = FALSE)
# 给外显子和内含子添加序号
exons_with_id <- paste0("Exon_", seq_along(exon_sequences))
introns_with_id <- paste0("Intron_", seq_along(intron_sequences))
# 将外显子和内含子合并在一起
sequences <- c(
setNames(exon_sequences, exons_with_id),
setNames(intron_sequences, introns_with_id)
)
# 根据序列位置进行排序（将外显子按位置排序，将内含子按位置排序）
sorted_sequences <- sequences[order(as.integer(gsub("Exon_|Intron_", "", names(sequences))))]
# 将序列转换为数据框
sequences_df <- data.frame(
ID = names(sorted_sequences),
Sequence = unlist(sorted_sequences),
stringsAsFactors = FALSE
)
# 返回数据框
return(sequences_df)
}
devtools::document()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
roxygen2::roxygenize()
#自定义函数#
qqseq <- function(transcript_id, species, max_retries = 20) {
# 加载包
suppressMessages(library(biomaRt))
suppressMessages(library(BSgenome))
suppressMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressMessages(library(dplyr))
suppressMessages(library(Biostrings))
# 设置Ensembl数据集
if (species == "human") {
dataset <- "hsapiens_gene_ensembl"
genome <- BSgenome.Hsapiens.UCSC.hg38
} else if (species == "mouse") {
dataset <- "mmusculus_gene_ensembl"
genome <- BSgenome.Mmusculus.UCSC.mm39
} else {
stop("Unsupported species. Please use 'human' or 'mouse'.")
}
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = dataset)
# 获取转录本外显子信息
exons <- NULL
for (i in seq_len(max_retries)) {
exons <- tryCatch({
getBM(attributes = c("chromosome_name", "exon_chrom_start", "exon_chrom_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for exons (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(exons) && nrow(exons) > 0) break
}
if (is.null(exons) || nrow(exons) == 0) {
stop("Transcript not found or error in retrieving exon data.")
}
# 获取转录本信息
transcript_info <- NULL
for (i in seq_len(max_retries)) {
transcript_info <- tryCatch({
getBM(attributes = c("chromosome_name", "transcript_start", "transcript_end", "strand"),
filters = "ensembl_transcript_id", values = transcript_id, mart = ensembl)
}, error = function(e) {
cat("Error in getBM for transcript_info (attempt ", i, "): ", e$message, "\n")
NULL
})
if (!is.null(transcript_info) && nrow(transcript_info) > 0) break
}
if (is.null(transcript_info) || nrow(transcript_info) == 0) {
stop("Transcript information not found or error in retrieving transcript data.")
}
# 计算外显子和内含子位置
if (transcript_info$strand == 1) {  # 正链
exons <- exons %>%
arrange(exon_chrom_start)  # 按起始位置升序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_end[-nrow(exons)] + 1,
end = exons$exon_chrom_start[-1] - 1
)
} else {  # 负链
exons <- exons %>%
arrange(desc(exon_chrom_start))  # 按起始位置降序排列
introns <- data.frame(
chromosome_name = rep(transcript_info$chromosome_name, nrow(exons) - 1),
start = exons$exon_chrom_start[-1] + 1,
end = exons$exon_chrom_end[-nrow(exons)] - 1
) %>%
arrange(desc(start))  # 按内含子起始位置降序排列
}
# 移除无效的内含子区域
introns <- introns %>%
filter(start <= end)
# 提取外显子序列
exon_sequences <- mapply(function(start, end) {
seq <- getSeq(genome, names = paste0("chr", exons$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, exons$exon_chrom_start, exons$exon_chrom_end, SIMPLIFY = FALSE)
# 提取内含子序列
intron_sequences <- mapply(function(start, end) {
if (start > end) return(NULL)
seq <- getSeq(genome, names = paste0("chr", introns$chromosome_name[1]), start = start, end = end)
if (transcript_info$strand == -1) {
seq <- reverseComplement(seq)
}
as.character(seq)  # 转换为字符
}, introns$start, introns$end, SIMPLIFY = FALSE)
# 给外显子和内含子添加序号
exons_with_id <- paste0("Exon_", seq_along(exon_sequences))
introns_with_id <- paste0("Intron_", seq_along(intron_sequences))
# 将外显子和内含子合并在一起
sequences <- c(
setNames(exon_sequences, exons_with_id),
setNames(intron_sequences, introns_with_id)
)
# 根据序列位置进行排序（将外显子按位置排序，将内含子按位置排序）
sorted_sequences <- sequences[order(as.integer(gsub("Exon_|Intron_", "", names(sequences))))]
# 将序列转换为数据框
sequences_df <- data.frame(
ID = names(sorted_sequences),
Sequence = unlist(sorted_sequences),
stringsAsFactors = FALSE
)
# 返回数据框
return(sequences_df)
}
# 示例使用
result <- qqseq("ENSMUST00000127786", "mouse")
devtools::document()
devtools::document()
# 示例使用
result <- qqseq("ENSMUST00000127786", "mouse")
# 示例使用
result <- qqseq("ENSMUST00000127786", "mouse")
View(result)
View(result)
library(qqseq)
result <- qqseq("ENSMUST00000153883", "mouse")
detach("package:qqseq", unload = TRUE)
remove.packages("qqseq")
result <- qqseq("ENSMUST00000127786", "mouse")
suppressMessages({
library(biomaRt)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38)
library(BSgenome.Mmusculus.UCSC.mm39)
library(dplyr)
library(Biostrings)
})
# 初始化环境
renv::init()
# 如果包为使用时必须的，则需要设置 type = "Imports"
usethis::use_package(package = "biomaRt", type = "Imports")
install.packages("usethis")
library(renv)
install.packages("usethis")
# 初始化环境
renv::init()
# 初始化环境
renv::init()
# 初始化环境
renv::init()
# 如果包为使用时必须的，则需要设置 type = "Imports"
usethis::use_package(package = "biomaRt", type = "Imports")
usethis::use_package(package = "BSgenome", type = "Imports")
usethis::use_package(package = "BSgenome", type = "Imports")
usethis::use_package(package = "BSgenome.Hsapiens.UCSC.hg38", type = "Imports")
usethis::use_package(package = "BSgenome.Mmusculus.UCSC.mm39", type = "Imports")
usethis::use_package(package = "dplyr", type = "Imports")
usethis::use_package(package = "Biostrings", type = "Imports")
install.packages("E:/Rstudio/BSgenome_1.72.0.tar.gz", repos = NULL, type = "source")
install.packages("E:/Rstudio/BSgenome.Mmusculus.UCSC.mm39_1.4.3.tar.gz", repos = NULL, type = "source")
install.packages("E:/Rstudio/BSgenome.Hsapiens.UCSC.hg38_1.4.5.tar.gz", repos = NULL, type = "source")
devtools::load_all()
install.packages("devtools")
install.packages("devtools")
install.packages("E:/Rstudio/openssl_2.2.0.tar.gz", repos = NULL, type = "source")
install.packages("openssl")
install.packages("E:/Rstudio/openssl_2.2.0.tar.gz", repos = NULL, type = "source")
install.packages("E:/Rstudio/openssl_2.2.0.tar.gz", repos = NULL, type = "source")
install.packages("devtools")
library(devtools)
# 初始化环境
renv::init()
install.packages("devtools")
